{"version":3,"sources":["components/SearchBox/SearchBox.jsx","components/Card/Card.jsx","components/CardList/CardList.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","type","value","searchValue","onChange","search","className","placeholder","Card","onClick","delete","src","monster","id","alt","name","email","CardList","monsters","map","mons","index","key","App","state","searchRobotHandler","event","setState","target","deleteRobotHandler","newMonsters","newIndex","findIndex","item","splice","fetch","then","res","json","this","filteredMonsters","filter","mon","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAaeA,G,YAVG,SAACC,GAAD,OACjB,2BACCC,KAAK,SACLC,MAAOF,EAAMG,YACbC,SAAUJ,EAAMK,OAChBC,UAAU,YACVC,YAAY,oBCICC,G,MAVF,SAACR,GACb,OACC,yBAAKM,UAAU,gBAAgBG,QAAST,EAAMU,QAC7C,yBAAKC,IAAG,+BAA0BX,EAAMY,QAAQC,GAAxC,qBAA+DC,IAAI,QAC3E,4BAAKd,EAAMY,QAAQG,MACnB,2BAAIf,EAAMY,QAAQI,UCENC,G,MANE,SAACjB,GAAD,OAChB,yBAAKM,UAAU,YACbN,EAAMkB,SAASC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAKF,EAAKP,GAAID,QAASQ,EAAMV,OAAQ,kBAAMV,EAAMU,OAAOU,EAAKP,aCsC3FU,E,2MAtCdC,MAAQ,CACPN,SAAW,GACXb,OAAW,I,EAGZoB,mBAAqB,SAACC,GACrB,EAAKC,SAAS,CAAEtB,OAAQqB,EAAME,OAAO1B,S,EAGtC2B,mBAAqB,SAAChB,GACrB,IAAMiB,EAAW,YACb,EAAKN,MAAMN,UAETa,EAAWD,EAAYE,WAAU,SAACC,GAAD,OAAUA,EAAKpB,KAAOA,KAC7DiB,EAAYI,OAAOH,EAAU,GAC7B,EAAKJ,SAAS,CAAET,SAAUY,K,mFAGN,IAAD,OACnBK,MAAM,8CACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAChB,GAAD,OAAU,EAAKO,SAAS,CAAET,SAAUE,S,+BAGlC,IAAD,EACqBmB,KAAKf,MAA1BN,EADA,EACAA,SAAUb,EADV,EACUA,OACZmC,EAAmBtB,EAASuB,QAAO,SAACC,GAAD,OAASA,EAAI3B,KAAK4B,cAAcC,SAASvC,EAAOsC,kBAEzF,OACC,yBAAKrC,UAAU,OACd,iDACA,kBAAC,EAAD,CAAWH,YAAaoC,KAAKf,MAAMnB,OAAQA,OAAQkC,KAAKd,qBACxD,kBAAC,EAAD,CAAUP,SAAUsB,EAAkB9B,OAAQ6B,KAAKV,0B,GAjCrCgB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.5dfca981.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = (props) => (\r\n\t<input\r\n\t\ttype='search'\r\n\t\tvalue={props.searchValue}\r\n\t\tonChange={props.search}\r\n\t\tclassName='SearchBox'\r\n\t\tplaceholder='Search Robots'\r\n\t/>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='CardContainer' onClick={props.delete}>\r\n\t\t\t<img src={`https://robohash.org/${props.monster.id}?set=set2&150x150`} alt='pic' />\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = (props) => (\r\n\t<div className='CardList'>\r\n\t\t{props.monsters.map((mons, index) => <Card key={mons.id} monster={mons} delete={() => props.delete(mons.id)} />)}\r\n\t</div>\r\n);\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from './components/SearchBox/SearchBox.jsx';\nimport CardList from './components/CardList/CardList';\n\nclass App extends Component {\n\tstate = {\n\t\tmonsters : [],\n\t\tsearch   : ''\n\t};\n\n\tsearchRobotHandler = (event) => {\n\t\tthis.setState({ search: event.target.value });\n\t};\n\n\tdeleteRobotHandler = (id) => {\n\t\tconst newMonsters = [\n\t\t\t...this.state.monsters\n\t\t];\n\t\tconst newIndex = newMonsters.findIndex((item) => item.id === id);\n\t\tnewMonsters.splice(newIndex, 1);\n\t\tthis.setState({ monsters: newMonsters });\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((mons) => this.setState({ monsters: mons }));\n\t}\n\n\trender() {\n\t\tconst { monsters, search } = this.state;\n\t\tconst filteredMonsters = monsters.filter((mon) => mon.name.toLowerCase().includes(search.toLowerCase()));\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters Database</h1>\n\t\t\t\t<SearchBox searchValue={this.state.search} search={this.searchRobotHandler} />\n\t\t\t\t<CardList monsters={filteredMonsters} delete={this.deleteRobotHandler} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}